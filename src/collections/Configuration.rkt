#lang racket/base

#|
Configuration.rkt - configure the site production

One Configuration struct is required to build the website.
The file is primarily loaded from a "config.creo" file,
which is evaluated and turned into a Creo struct.

The results are collected and then converted into a
Configuration struct which is then used by Creo.

A default "config.creo" file should be provided
upon the creation of a new project. If one is not
present, one can be autogenerated.

This file contains the Configuration struct, and a
means of auto-generating the "config.creo" file
by scanning for appropriate connections.
|#

(require (only-in racket/contract define/contract -> parameter/c list/c or/c)
         (only-in racket/file file->list)
         )


(provide (struct-out Config)
         (all-defined-out)
         )

(define-namespace-anchor Config:Anchor)
(define Config:Namespace (namespace-anchor->namespace Config:Anchor))


(struct Config (site-title
                author-full-name
                author-short-name
                site-base-url
                has-imagemagick?
                has-ffmpeg?
                allowed-imagetypes
                base-compression-level
                theme-folder
                production?
                )
  #:transparent)

(define/contract current-config
  (parameter/c (or/c boolean? Config?))
  (make-parameter #f))

(define/contract site-title
  (parameter/c string?)
  (make-parameter "Creo Site"))


;; Provide your full name here (as opposed to the short name)
(define/contract author-full-name
  (parameter/c string?)
  (make-parameter "Your Name"))

;; Provide your shorter name here, or nickname, etc
(define/contract author-short-name
  (parameter/c string?)
  (make-parameter "Your Name (but shorter"))

(define/contract site-base-url
  (parameter/c string?)
  (make-parameter "https://yoursite.com"))

(define/contract has-imagemagick?
  (parameter/c boolean?)
  (make-parameter #f))

(define/contract has-ffmpeg?
  (parameter/c boolean?)
  (make-parameter #f))

(define/contract allowed-imagetypes
  (parameter/c list?)
  (make-parameter '(jpg png gif)))


(define/contract base-compression-level
  (parameter/c number?)
  (make-parameter 94))


;; Select the default theme folder. Eventually, Creo
;; will create a base theme for users to enjoy right
;; out of the gate
;; (designers wanted, CREO is hiring!)
;; Note to GitHub:
(define/contract theme-folder
  (parameter/c string?)
  (make-parameter "base"))


;; Production matters when deploying it for the real world,
;; as links will change to the "live" version
;; ie.
;; production=#t => links = base-url + link-to-file
;; production=#f => links = localhost + link-to-file
(define/contract production?
  (parameter/c boolean?)
  (make-parameter #f))



;; Create a configuration struct from all parameters available
;; NOTE: If you add more fields to the config, remember to append it
;; to here AND to the file writer
(define (create-config-from-params)
  (Config (site-title)
          (author-full-name)
          (author-short-name)
          (site-base-url)
          (has-imagemagick?)
          (has-ffmpeg?)
          (allowed-imagetypes)
          (base-compression-level)
          (theme-folder)
          (production?)
          ))


;; The default configuration file writer when new projects are
;; either initialized, or attempting to auto-update settings
(define (Config:write-default path-to-file)
  (define parameters-list
    `((site-title             . "Your Title here")
      (author-full-name       . "Creo Employee #37")
      (author-short-name      . "Employee #37")
      (site-base-url          . "https://your-site-here.com")
      ;(has-imagemagick?       . #f)
      ;(has-ffmpeg?            . #f)
      (allowed-imagetypes     . '("jpg" "png" "gif"))
      (base-compression-level . 94)
      (theme-folder           . "base")))
  (call-with-output-file
    path-to-file #:exists 'replace
    (Î» (out)
      (parameterize ([current-output-port out])
        (displayln "; Write your configuration here")
        (displayln "; example: (site-title \"Your Title Here\")")
        (displayln "")
        (for ([pair parameters-list])
          (let ([property (car pair)]
                [value    (cdr pair)])
            (displayln (format "(~a ~a)" property value))))))))



(define (Config:read-file fname)
  (define config-code (cons 'begin (file->list fname)))
  (printf "Got code: ~a\n" config-code)
  (parameterize ([current-namespace Config:Namespace])
    (eval config-code))
  (displayln "Got here")
  (create-config-from-params))


;; Testing section
(module+ test
  (require rackunit)
  )

; end Configuration.rkt
